Looking to launch executable "/media/houcem/theDrum/modules/miniconda3/envs/nextflow=23.04/bin/bwa-mem2.avx2", simd = .avx2
Launching executable "/media/houcem/theDrum/modules/miniconda3/envs/nextflow=23.04/bin/bwa-mem2.avx2"
You must specify an input file.
Usage: samtools addreplacerg [options] [-r <@RG line> | -R <existing id>] [-m orphan_only|overwrite_all] [-o <output.bam>] <input.bam>

Options:
  -m MODE   Set the mode of operation from one of overwrite_all, orphan_only [overwrite_all]
  -o FILE   Where to write output to [stdout]
  -r STRING @RG line text
  -R STRING ID of @RG line in existing header to use
  -u        Output uncompressed data
  -w        Overwrite an existing @RG line
  --no-PG   Do not add a PG line
      --input-fmt FORMAT[,OPT[=VAL]]...
               Specify input format (SAM, BAM, CRAM)
      --input-fmt-option OPT[=VAL]
               Specify a single input file format option in the form
               of OPTION or OPTION=VALUE
  -O, --output-fmt FORMAT[,OPT[=VAL]]...
               Specify output format (SAM, BAM, CRAM)
      --output-fmt-option OPT[=VAL]
               Specify a single output file format option in the form
               of OPTION or OPTION=VALUE
      --reference FILE
               Reference sequence FASTA FILE [null]
  -@, --threads INT
               Number of additional threads to use [0]
      --write-index
               Automatically index the output files [off]
      --verbosity INT
               Set level of verbosity
[main_samview] fail to read the header from "-".
[W::hts_set_opt] Cannot change block size for this format
samtools sort: failed to read header from "-"
-----------------------------
Executing in AVX2 mode!!
-----------------------------
* SA compression enabled with xfactor: 8
* Ref file: /media/houcem/theDrum/BILIM/github/FHG_clinical_bioinformatics/assembly_ngs/ref_genome/dpyd.fa
* Entering FMI_search
* Index file found. Loading index from /media/houcem/theDrum/BILIM/github/FHG_clinical_bioinformatics/assembly_ngs/ref_genome/dpyd.fa.bwt.2bit.64
* Reference seq len for bi-index = 1700635
* sentinel-index: 1148050
* Count:
0,	1
1,	551677
2,	850318
3,	1148959
4,	1700635

* Reading other elements of the index from files /media/houcem/theDrum/BILIM/github/FHG_clinical_bioinformatics/assembly_ngs/ref_genome/dpyd.fa
* Index prefix: /media/houcem/theDrum/BILIM/github/FHG_clinical_bioinformatics/assembly_ngs/ref_genome/dpyd.fa
* Read 0 ALT contigs
* Done reading Index!!
* Reading reference genome..
* Binary seq file = /media/houcem/theDrum/BILIM/github/FHG_clinical_bioinformatics/assembly_ngs/ref_genome/dpyd.fa.0123
* Reference genome size: 1700634 bp
* Done reading reference genome !!

------------------------------------------
1. Memory pre-allocation for Chaining: 278.6958 MB
2. Memory pre-allocation for BSW: 479.2340 MB
3. Memory pre-allocation for BWT: 154.6284 MB
------------------------------------------
* Threads used (compute): 2
* No. of pipeline threads: 2

[0000] read_chunk: 20000000, work_chunk_size: 14000000, nseq: 200000
	[0000][ M::kt_pipeline] read 200000 sequences (14000000 bp)...
[0000] Reallocating initial memory allocations!!
[0000] read_chunk: 20000000, work_chunk_size: 0, nseq: 0
[0000] Calling mem_process_seqs.., task: 0
[0000] 1. Calling kt_for - worker_bwt
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 850317, n: 200000
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (0, 96337, 0, 0)
[0000][PE] skip orientation FF as there are not enough pairs
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (465, 499, 533)
[0000][PE] low and high boundaries for computing mean and std.dev: (329, 669)
[0000][PE] mean and std.dev: (498.91, 49.91)
[0000][PE] low and high boundaries for proper pairs: (261, 737)
[0000][PE] skip orientation RF as there are not enough pairs
[0000][PE] skip orientation RR as there are not enough pairs
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 200000 reads in 4.743 CPU sec, 2.387 real sec
